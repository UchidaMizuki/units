// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// R_ut_init
SEXP R_ut_init(CharacterVector path);
RcppExport SEXP _units_R_ut_init(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(R_ut_init(path));
    return rcpp_result_gen;
END_RCPP
}
// R_ut_set_encoding
void R_ut_set_encoding(SEXP sys_, CharacterVector enc_str);
RcppExport SEXP _units_R_ut_set_encoding(SEXP sys_SEXP, SEXP enc_strSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sys_(sys_SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type enc_str(enc_strSEXP);
    R_ut_set_encoding(sys_, enc_str);
    return R_NilValue;
END_RCPP
}
// R_ut_is_parseable
bool R_ut_is_parseable(SEXP sys_, CharacterVector str);
RcppExport SEXP _units_R_ut_is_parseable(SEXP sys_SEXP, SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sys_(sys_SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(R_ut_is_parseable(sys_, str));
    return rcpp_result_gen;
END_RCPP
}
// R_ut_are_convertible
bool R_ut_are_convertible(SEXP sys_, CharacterVector a, CharacterVector b);
RcppExport SEXP _units_R_ut_are_convertible(SEXP sys_SEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sys_(sys_SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(R_ut_are_convertible(sys_, a, b));
    return rcpp_result_gen;
END_RCPP
}
// R_ut_convert_doubles
NumericVector R_ut_convert_doubles(SEXP sys_, CharacterVector from, CharacterVector to, NumericVector val);
RcppExport SEXP _units_R_ut_convert_doubles(SEXP sys_SEXP, SEXP fromSEXP, SEXP toSEXP, SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sys_(sys_SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type from(fromSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type to(toSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type val(valSEXP);
    rcpp_result_gen = Rcpp::wrap(R_ut_convert_doubles(sys_, from, to, val));
    return rcpp_result_gen;
END_RCPP
}
// R_ut_new_dimensionless_unit
void R_ut_new_dimensionless_unit(SEXP sys_, CharacterVector name);
RcppExport SEXP _units_R_ut_new_dimensionless_unit(SEXP sys_SEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sys_(sys_SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type name(nameSEXP);
    R_ut_new_dimensionless_unit(sys_, name);
    return R_NilValue;
END_RCPP
}
// R_ut_scale
void R_ut_scale(SEXP sys_, CharacterVector from, CharacterVector to, double factor);
RcppExport SEXP _units_R_ut_scale(SEXP sys_SEXP, SEXP fromSEXP, SEXP toSEXP, SEXP factorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sys_(sys_SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type from(fromSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type to(toSEXP);
    Rcpp::traits::input_parameter< double >::type factor(factorSEXP);
    R_ut_scale(sys_, from, to, factor);
    return R_NilValue;
END_RCPP
}
// R_ut_offset
void R_ut_offset(SEXP sys_, CharacterVector from, CharacterVector to, double factor);
RcppExport SEXP _units_R_ut_offset(SEXP sys_SEXP, SEXP fromSEXP, SEXP toSEXP, SEXP factorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sys_(sys_SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type from(fromSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type to(toSEXP);
    Rcpp::traits::input_parameter< double >::type factor(factorSEXP);
    R_ut_offset(sys_, from, to, factor);
    return R_NilValue;
END_RCPP
}
// R_ut_get_symbol
CharacterVector R_ut_get_symbol(SEXP sys_, CharacterVector str);
RcppExport SEXP _units_R_ut_get_symbol(SEXP sys_SEXP, SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sys_(sys_SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(R_ut_get_symbol(sys_, str));
    return rcpp_result_gen;
END_RCPP
}
// R_ut_get_name
CharacterVector R_ut_get_name(SEXP sys_, CharacterVector str);
RcppExport SEXP _units_R_ut_get_name(SEXP sys_SEXP, SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sys_(sys_SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(R_ut_get_name(sys_, str));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_units_R_ut_init", (DL_FUNC) &_units_R_ut_init, 1},
    {"_units_R_ut_set_encoding", (DL_FUNC) &_units_R_ut_set_encoding, 2},
    {"_units_R_ut_is_parseable", (DL_FUNC) &_units_R_ut_is_parseable, 2},
    {"_units_R_ut_are_convertible", (DL_FUNC) &_units_R_ut_are_convertible, 3},
    {"_units_R_ut_convert_doubles", (DL_FUNC) &_units_R_ut_convert_doubles, 4},
    {"_units_R_ut_new_dimensionless_unit", (DL_FUNC) &_units_R_ut_new_dimensionless_unit, 2},
    {"_units_R_ut_scale", (DL_FUNC) &_units_R_ut_scale, 4},
    {"_units_R_ut_offset", (DL_FUNC) &_units_R_ut_offset, 4},
    {"_units_R_ut_get_symbol", (DL_FUNC) &_units_R_ut_get_symbol, 2},
    {"_units_R_ut_get_name", (DL_FUNC) &_units_R_ut_get_name, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_units(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
